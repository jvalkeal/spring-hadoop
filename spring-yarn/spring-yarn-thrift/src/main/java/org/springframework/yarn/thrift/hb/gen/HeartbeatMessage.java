/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.springframework.yarn.thrift.hb.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HeartbeatMessage implements org.apache.thrift.TBase<HeartbeatMessage, HeartbeatMessage._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HeartbeatMessage");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField COMMAND_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("commandPort", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeartbeatMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeartbeatMessageTupleSchemeFactory());
  }

  /**
   * Slave Node id
   */
  public String nodeId; // required
  /**
   * Slave hostname
   */
  public String host; // required
  /**
   * Slave Node name
   * 
   * @see NodeType
   */
  public NodeType nodeType; // required
  /**
   * Slave Node Info
   */
  public NodeInfo nodeInfo; // required
  /**
   * Port on which Command EndPoint will listen on
   */
  public int commandPort; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Slave Node id
     */
    NODE_ID((short)1, "nodeId"),
    /**
     * Slave hostname
     */
    HOST((short)2, "host"),
    /**
     * Slave Node name
     * 
     * @see NodeType
     */
    NODE_TYPE((short)3, "nodeType"),
    /**
     * Slave Node Info
     */
    NODE_INFO((short)4, "nodeInfo"),
    /**
     * Port on which Command EndPoint will listen on
     */
    COMMAND_PORT((short)5, "commandPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // HOST
          return HOST;
        case 3: // NODE_TYPE
          return NODE_TYPE;
        case 4: // NODE_INFO
          return NODE_INFO;
        case 5: // COMMAND_PORT
          return COMMAND_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMANDPORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMMAND_PORT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NodeType.class)));
    tmpMap.put(_Fields.NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
    tmpMap.put(_Fields.COMMAND_PORT, new org.apache.thrift.meta_data.FieldMetaData("commandPort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HeartbeatMessage.class, metaDataMap);
  }

  public HeartbeatMessage() {
  }

  public HeartbeatMessage(
    String nodeId,
    String host,
    NodeType nodeType,
    NodeInfo nodeInfo)
  {
    this();
    this.nodeId = nodeId;
    this.host = host;
    this.nodeType = nodeType;
    this.nodeInfo = nodeInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HeartbeatMessage(HeartbeatMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeId()) {
      this.nodeId = other.nodeId;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetNodeType()) {
      this.nodeType = other.nodeType;
    }
    if (other.isSetNodeInfo()) {
      this.nodeInfo = new NodeInfo(other.nodeInfo);
    }
    this.commandPort = other.commandPort;
  }

  public HeartbeatMessage deepCopy() {
    return new HeartbeatMessage(this);
  }

  @Override
  public void clear() {
    this.nodeId = null;
    this.host = null;
    this.nodeType = null;
    this.nodeInfo = null;
    setCommandPortIsSet(false);
    this.commandPort = 0;
  }

  /**
   * Slave Node id
   */
  public String getNodeId() {
    return this.nodeId;
  }

  /**
   * Slave Node id
   */
  public HeartbeatMessage setNodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  public void unsetNodeId() {
    this.nodeId = null;
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return this.nodeId != null;
  }

  public void setNodeIdIsSet(boolean value) {
    if (!value) {
      this.nodeId = null;
    }
  }

  /**
   * Slave hostname
   */
  public String getHost() {
    return this.host;
  }

  /**
   * Slave hostname
   */
  public HeartbeatMessage setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  /**
   * Slave Node name
   * 
   * @see NodeType
   */
  public NodeType getNodeType() {
    return this.nodeType;
  }

  /**
   * Slave Node name
   * 
   * @see NodeType
   */
  public HeartbeatMessage setNodeType(NodeType nodeType) {
    this.nodeType = nodeType;
    return this;
  }

  public void unsetNodeType() {
    this.nodeType = null;
  }

  /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeType() {
    return this.nodeType != null;
  }

  public void setNodeTypeIsSet(boolean value) {
    if (!value) {
      this.nodeType = null;
    }
  }

  /**
   * Slave Node Info
   */
  public NodeInfo getNodeInfo() {
    return this.nodeInfo;
  }

  /**
   * Slave Node Info
   */
  public HeartbeatMessage setNodeInfo(NodeInfo nodeInfo) {
    this.nodeInfo = nodeInfo;
    return this;
  }

  public void unsetNodeInfo() {
    this.nodeInfo = null;
  }

  /** Returns true if field nodeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeInfo() {
    return this.nodeInfo != null;
  }

  public void setNodeInfoIsSet(boolean value) {
    if (!value) {
      this.nodeInfo = null;
    }
  }

  /**
   * Port on which Command EndPoint will listen on
   */
  public int getCommandPort() {
    return this.commandPort;
  }

  /**
   * Port on which Command EndPoint will listen on
   */
  public HeartbeatMessage setCommandPort(int commandPort) {
    this.commandPort = commandPort;
    setCommandPortIsSet(true);
    return this;
  }

  public void unsetCommandPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMANDPORT_ISSET_ID);
  }

  /** Returns true if field commandPort is set (has been assigned a value) and false otherwise */
  public boolean isSetCommandPort() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMANDPORT_ISSET_ID);
  }

  public void setCommandPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMANDPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case NODE_TYPE:
      if (value == null) {
        unsetNodeType();
      } else {
        setNodeType((NodeType)value);
      }
      break;

    case NODE_INFO:
      if (value == null) {
        unsetNodeInfo();
      } else {
        setNodeInfo((NodeInfo)value);
      }
      break;

    case COMMAND_PORT:
      if (value == null) {
        unsetCommandPort();
      } else {
        setCommandPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case HOST:
      return getHost();

    case NODE_TYPE:
      return getNodeType();

    case NODE_INFO:
      return getNodeInfo();

    case COMMAND_PORT:
      return Integer.valueOf(getCommandPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case HOST:
      return isSetHost();
    case NODE_TYPE:
      return isSetNodeType();
    case NODE_INFO:
      return isSetNodeInfo();
    case COMMAND_PORT:
      return isSetCommandPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HeartbeatMessage)
      return this.equals((HeartbeatMessage)that);
    return false;
  }

  public boolean equals(HeartbeatMessage that) {
    if (that == null)
      return false;

    boolean this_present_nodeId = true && this.isSetNodeId();
    boolean that_present_nodeId = true && that.isSetNodeId();
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (!this.nodeId.equals(that.nodeId))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_nodeType = true && this.isSetNodeType();
    boolean that_present_nodeType = true && that.isSetNodeType();
    if (this_present_nodeType || that_present_nodeType) {
      if (!(this_present_nodeType && that_present_nodeType))
        return false;
      if (!this.nodeType.equals(that.nodeType))
        return false;
    }

    boolean this_present_nodeInfo = true && this.isSetNodeInfo();
    boolean that_present_nodeInfo = true && that.isSetNodeInfo();
    if (this_present_nodeInfo || that_present_nodeInfo) {
      if (!(this_present_nodeInfo && that_present_nodeInfo))
        return false;
      if (!this.nodeInfo.equals(that.nodeInfo))
        return false;
    }

    boolean this_present_commandPort = true && this.isSetCommandPort();
    boolean that_present_commandPort = true && that.isSetCommandPort();
    if (this_present_commandPort || that_present_commandPort) {
      if (!(this_present_commandPort && that_present_commandPort))
        return false;
      if (this.commandPort != that.commandPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(HeartbeatMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    HeartbeatMessage typedOther = (HeartbeatMessage)other;

    lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeType()).compareTo(typedOther.isSetNodeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, typedOther.nodeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeInfo()).compareTo(typedOther.isSetNodeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfo, typedOther.nodeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommandPort()).compareTo(typedOther.isSetCommandPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommandPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commandPort, typedOther.commandPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HeartbeatMessage(");
    boolean first = true;

    sb.append("nodeId:");
    if (this.nodeId == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeType:");
    if (this.nodeType == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeInfo:");
    if (this.nodeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeInfo);
    }
    first = false;
    if (isSetCommandPort()) {
      if (!first) sb.append(", ");
      sb.append("commandPort:");
      sb.append(this.commandPort);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
    }
    if (host == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'host' was not present! Struct: " + toString());
    }
    if (nodeType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeType' was not present! Struct: " + toString());
    }
    if (nodeInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeInfo' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (nodeInfo != null) {
      nodeInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeartbeatMessageStandardSchemeFactory implements SchemeFactory {
    public HeartbeatMessageStandardScheme getScheme() {
      return new HeartbeatMessageStandardScheme();
    }
  }

  private static class HeartbeatMessageStandardScheme extends StandardScheme<HeartbeatMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HeartbeatMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeId = iprot.readString();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeType = NodeType.findByValue(iprot.readI32());
              struct.setNodeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NODE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeInfo = new NodeInfo();
              struct.nodeInfo.read(iprot);
              struct.setNodeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMAND_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commandPort = iprot.readI32();
              struct.setCommandPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HeartbeatMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(struct.nodeId);
        oprot.writeFieldEnd();
      }
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      if (struct.nodeType != null) {
        oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.nodeType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.nodeInfo != null) {
        oprot.writeFieldBegin(NODE_INFO_FIELD_DESC);
        struct.nodeInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommandPort()) {
        oprot.writeFieldBegin(COMMAND_PORT_FIELD_DESC);
        oprot.writeI32(struct.commandPort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeartbeatMessageTupleSchemeFactory implements SchemeFactory {
    public HeartbeatMessageTupleScheme getScheme() {
      return new HeartbeatMessageTupleScheme();
    }
  }

  private static class HeartbeatMessageTupleScheme extends TupleScheme<HeartbeatMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HeartbeatMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.nodeId);
      oprot.writeString(struct.host);
      oprot.writeI32(struct.nodeType.getValue());
      struct.nodeInfo.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetCommandPort()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCommandPort()) {
        oprot.writeI32(struct.commandPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HeartbeatMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.nodeId = iprot.readString();
      struct.setNodeIdIsSet(true);
      struct.host = iprot.readString();
      struct.setHostIsSet(true);
      struct.nodeType = NodeType.findByValue(iprot.readI32());
      struct.setNodeTypeIsSet(true);
      struct.nodeInfo = new NodeInfo();
      struct.nodeInfo.read(iprot);
      struct.setNodeInfoIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.commandPort = iprot.readI32();
        struct.setCommandPortIsSet(true);
      }
    }
  }

}

